{
  "name": "riemann",
  "version": "1.0.1",
  "description": "node.js client for Riemann, supports hybrid UDP/TCP connections.",
  "author": "",
  "contributors": [
    {
      "name": "Lovell Fuller",
      "email": "npm@lovell.info"
    }
  ],
  "main": "riemann",
  "engines": {
    "node": "> 0.6.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/perezd/riemann-nodejs-client.git"
  },
  "dependencies": {
    "node-protobuf": "^1.2.9"
  },
  "devDependencies": {
    "mocha": "*",
    "jshint": "*"
  },
  "scripts": {
    "lint": "find . -name '*.js' -and -not -path './node_modules/*' | xargs ./node_modules/.bin/jshint --config ./.jshint",
    "test": "NODE_PATH=./ mocha --ui tdd --reporter list --timeout 2000 --slow 5000"
  },
  "readme": "# [Riemann](http://aphyr.github.com/riemann/) Node.js Client\n\nbecause you should be monitoring all of those [non-blocking buffet plates.](http://www.infinitelooper.com/?v=-sfZqL4Plxc&p=n#/242;267)\n\n## Prerequisites\n\nRiemann uses [Google Protocol Buffers](https://github.com/google/protobuf),\nso please make sure it's installed beforehand.\n\n### Ubuntu/Debian via apt\n\n```sh\napt-get install libprotobuf-dev\n```\n\n### RHEL/Centos via yum\n\n```sh\nyum install protobuf-devel\n```\n\n### Mac OS via homebrew\n\n```sh\nbrew install protobuf\n```\n\n### Windows\n\nhttps://github.com/fuwaneko/node-protobuf#windows\n\n## Installation\n\n```sh\nnpm install riemann\n```\n\n## Getting Started\n\nfirst things first, we'll want to establish a new client:\n\n```js\nvar client = require('riemann').createClient({\n  host: 'some.riemann.server',\n  port: 5555\n});\n\nclient.on('connect', function() {\n  console.log('connected!');\n});\n```\n\nJust like [Riemann ruby client](https://github.com/aphyr/riemann-ruby-client), the client sends small events over UDP, by default. TCP is used for queries, and large events. There is no acknowledgement of UDP packets, but they are roughly an order of magnitude faster than TCP. We assume both TCP and UDP are listening to the same port.\n\nsending events is easy (see [list of valid event properties](http://aphyr.github.com/riemann/concepts.html)):\n\n```js\nclient.send(client.Event({\n  service: 'buffet_plates',\n  metric:  252.2,\n  tags:    ['nonblocking']\n}));\n```\n\nIf you wanted to send that message over TCP and receive an acknowledgement, you can specify the transport, explicitly:\n\n```js\nclient.on('data', function(ack) {\n  console.log('got it!');\n});\n\nclient.send(client.Event({\n  service: 'buffet_plates',\n  metric:  252.2,\n  tags:    ['nonblocking']\n}), client.tcp);\n```\n\nYou can also send events with custom attributes:\n\n```js\nclient.send(client.Event({\n  service: 'buffet_plates',\n  metric: 150,\n  attributes: [{key: \"sessionID\", value: \"000-001-165\"}],\n  tags: ['nonblocking']\n}), client.tcp);\n```\n\n\nWhen you're done monitoring, disconnect:\n\n```js\nclient.on('disconnect', function(){\n  console.log('disconnected!');\n});\nclient.disconnect();\n```\n\n\n## Contributing\n\nContributing is easy, just send me a pull request. Please take a look at the project issues, to see how you can help. Here are some helpful tips:\n\n- install the developer dependencies using `npm install --dev`\n- please add tests. I'm using [Mocha](http://visionmedia.github.com/mocha/) as a test runner, you can run the tests using `npm test`\n- please check your syntax with the included jshint configuration using `npm run-script lint`. It shouldn't report any errors.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/perezd/riemann-nodejs-client/issues"
  },
  "homepage": "https://github.com/perezd/riemann-nodejs-client#readme",
  "_id": "riemann@1.0.1",
  "_from": "riemann@>=1.0.1 <2.0.0"
}
